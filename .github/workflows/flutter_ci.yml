name: Flutter CI

on:
  pull_request:
    branches:
      - master

permissions:
  pull-requests: write
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    # Step 1: Checkout the repository code with full history
    - name: Checkout code
      uses: actions/checkout@v2
      with:
        fetch-depth: 0  # Garantir que todo o histórico seja baixado

    # Step 2: Generate filtered diff for Gemini review (only .dart files)
    - name: Generate filtered diff for Gemini review
      run: git diff origin/master...HEAD -- '*.dart' > changes.diff

    # Step 3: Send the full diff to Gemini in one request
    - name: Send full diff to Gemini
      id: gemini_review
      run: |
        # Read the full diff content into a variable
        DIFF_CONTENT=$(cat changes.diff)

        # Escape the full DIFF_CONTENT for JSON
        ESCAPED_DIFF=$(jq -Rs . <<< "$DIFF_CONTENT")

        # Optimized review message
        FULL_CONTENT="🔍 **Resumo Detalhado das Alterações do PR:**\nResumo detalhado das alterações:\n$DIFF_CONTENT\n\n📝 **Boas práticas de Flutter:**\nO código segue boas práticas de Flutter? Cite exemplos claros de práticas específicas relacionadas a widgets, state management e arquitetura.\n\n⚠️ **Riscos de Bugs:**\nIdentifique e descreva riscos específicos de bugs com base no código fornecido.\n\n🛠 **Sugestões de Refatoração (com exemplos de código):**\nSugira melhorias no código com exemplos práticos:\n```dart\nvoid exampleRefactor() {\n  // Exemplo de refatoração\n}\n```\n\n💡 **Dívidas Técnicas:**\nListe as dívidas
