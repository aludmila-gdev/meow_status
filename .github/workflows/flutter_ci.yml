name: Flutter CI

on:
  pull_request:
    branches:
      - master
      
permissions:
  pull-requests: write
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    # Step 1: Checkout the repository code with full history
    - name: Checkout code
      uses: actions/checkout@v2
      with:
        fetch-depth: 0  # Garantir que todo o histÃ³rico seja baixado

    # Step 2: Set up Flutter environment
    - name: Set up Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: '3.24.3'

    # Step 3: Install dependencies
    - name: Install dependencies
      run: flutter pub get

    # Step 4: Run tests 
    - name: Run tests
      run: flutter test

    # Optional: Build APK for Android
    # - name: Build APK
    #   run: flutter build apk --release

    # Step 5: Generate diff for GPT review
    - name: Generate diff for GPT review
      run: git diff origin/master...HEAD > changes.diff

    # Step 6: Request GPT code review
    - name: Request GPT code review
      id: gpt_review
      run: |
        # Read the diff content into a variable (limit the number of lines to minimize tokens)
        DIFF_CONTENT=$(head -n 10 changes.diff)

        # Concatenate the review message with the diff content
        FULL_CONTENT="Analyze the following Flutter code change:\n\n$DIFF_CONTENT\n\n
        Please provide feedback on:
        - Code structure and readability
        - Potential bugs or issues
        - Suggestions for refactoring or improving efficiency
        - Any violations of best practices for Flutter or mobile development."

        # Create the JSON body using jq to handle escaping and formatting
        JSON_BODY=$(jq -n \
        --arg content "Assistant for reviewing code." \
        --arg diff_content "$FULL_CONTENT" \
        '{
          model: "gpt-3.5-turbo",
          messages: [
            {role: "system", content: $content},
            {role: "user", content: $diff_content}
          ],
          max_tokens: 100  # Aumenta os tokens para permitir respostas mais detalhadas
        }')

        # Send the request to OpenAI API
        RESPONSE=$(curl -X POST "https://api.openai.com/v1/chat/completions" \
        -H "Authorization: Bearer ${{ secrets.OPENAI_API_KEY }}" \
        -H "Content-Type: application/json" \
        -d "$JSON_BODY")

        echo "API response: $RESPONSE"

        # Check if the response contains an error
        if echo "$RESPONSE" | grep -q '"error":'; then
          echo "Error in GPT API response"
          exit 1
        else
          # Save the response to a file instead of using GITHUB_ENV
          echo "$RESPONSE" > gpt_response.json
        fi

    # Step 7: Extract and display the assistant's message from the JSON response
    - name: Extract GPT response message
      run: |
        # Extract the message from the JSON file
        ASSISTANT_MESSAGE=$(jq -r '.choices[0].message.content' gpt_response.json)

        # Display the extracted message
        echo "GPT response: $ASSISTANT_MESSAGE"

        # Save it to the environment for later steps
        echo "ASSISTANT_MESSAGE=$ASSISTANT_MESSAGE" >> $GITHUB_ENV

    # Step 8: Post GPT review as a comment on the pull request
    - name: Post GPT review comment
      uses: peter-evans/create-or-update-comment@v1
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        issue-number: ${{ github.event.pull_request.number }}
        body: |
          ## GPT Code Review
          ${{ env.ASSISTANT_MESSAGE }}
