name: Flutter CI

on:
  pull_request:
    branches:
      - master

permissions:
  pull-requests: write
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    # Step 1: Checkout the repository code with full history
    - name: Checkout code
      uses: actions/checkout@v2
      with:
        fetch-depth: 0  # Garantir que todo o histórico seja baixado

    # Step 2: Set up Flutter environment
    - name: Set up Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: '3.24.3'

    # Step 3: Install dependencies
    - name: Install dependencies
      run: flutter pub get

    # Optional: Build APK for Android
    # - name: Build APK
    #   run: flutter build apk --release

    # Step 5: Generate diff for Gemini review
    - name: Generate diff for Gemini review
      run: git diff origin/master...HEAD > changes.diff

    # Step 6: Split the diff into chunks and send to Gemini
    - name: Send diff to Gemini in chunks
      id: gemini_review
      run: |
        # Read the full diff content into a variable
        DIFF_CONTENT=$(cat changes.diff)

        # Define chunk size and get the total length of the content
        CHUNK_SIZE=1000
        TOTAL_LENGTH=${#DIFF_CONTENT}

        # Loop through each chunk and send to Gemini API
        for (( i=0; i<$TOTAL_LENGTH; i+=$CHUNK_SIZE )); do
          CHUNK="${DIFF_CONTENT:i:CHUNK_SIZE}"

          # Escape the CHUNK for JSON
          ESCAPED_CHUNK=$(echo "$CHUNK" | jq -Rs .)

          # Optimized review message
          FULL_CONTENT="Análise de código Flutter:\n\nAlterações:\n$CHUNK\n\nFeedback:\n1. Boas práticas de Flutter?\n2. Resumo das alterações.\n3. Riscos de bugs?\n4. Sugestões de refatoração.\n5. Dívidas técnicas?"

          # Create the JSON payload using jq
          JSON_PAYLOAD=$(jq -n \
          --arg content "$FULL_CONTENT" \
          '{"contents":[{"role": "user", "parts":[{"text": $content}]}]}')

          # Send the request to the Gemini API
          API_KEY=${{ secrets.GOOGLE_GEMINI_API_KEY }}
          RESPONSE=$(curl -H 'Content-Type: application/json' \
            -d "$JSON_PAYLOAD" \
            "https://generativelanguage.googleapis.com/v1/models/gemini-pro:generateContent?key=${API_KEY}")

          echo "API response: $RESPONSE"

          # Save the response to a file
          echo "$RESPONSE" >> gemini_response.json
        done

    # Step 7: Extract Gemini response message to file
    - name: Extract Gemini response message
      run: |
        # Verifique se a resposta contém conteúdo válido
        if jq -e '.candidates[0].content.parts[0].text' gemini_response.json > /dev/null; then
          jq -r '.candidates[0].content.parts[0].text' gemini_response.json > gemini_review.md
        else
          echo "No valid content in response" > gemini_review.md
        fi

    # Step 8: Load the Gemini response into an environment variable
    - name: Load Gemini response into variable
      id: load_gemini_response
      run: |
        GEMINI_REVIEW=$(cat gemini_review.md)
        echo "GEMINI_REVIEW<<EOF" >> $GITHUB_ENV
        echo "$GEMINI_REVIEW" >> $GITHUB_ENV
        echo "EOF" >> $GITHUB_ENV

    # Step 9: Post Gemini review as a comment on the pull request
    - name: Post Gemini review comment
      uses: peter-evans/create-or-update-comment@v1
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        issue-number: ${{ github.event.pull_request.number }}
        body: |
          ## Gemini Code Review
          ${{ env.GEMINI_REVIEW }}
