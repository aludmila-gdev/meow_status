name: Flutter CI

on:
  pull_request:
    branches:
      - master

permissions:
  pull-requests: write
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    # Step 1: Checkout the repository code with full history
    - name: Checkout code
      uses: actions/checkout@v2
      with:
        fetch-depth: 0  # Garantir que todo o histórico seja baixado

    # Step 2: Generate filtered diff for Gemini review (only .dart files)
    - name: Generate filtered diff for Gemini review
      run: git diff origin/master...HEAD -- '*.dart' > changes.diff

    # Step 3: Send the full diff to Gemini in one request
    - name: Send full diff to Gemini
      id: gemini_review
      run: |
        # Read the full diff content into a variable
        DIFF_CONTENT=$(cat changes.diff)

        # Escape the full DIFF_CONTENT for JSON
        ESCAPED_DIFF=$(echo "$DIFF_CONTENT" | jq -Rs .)

        # Explicitly detailed and optimized review message with emojis, summary, and code snippets
        FULL_CONTENT=$(printf "🔍 **Resumo Detalhado das Alterações do PR:**\n
        Por favor, forneça uma análise detalhada das alterações feitas neste PR. O objetivo é que a resposta liste cada modificação no código **com base nos arquivos alterados**.\n\n

        📝 **Boas práticas de Flutter (OBRIGATÓRIO, inclua emojis):**\n
        Analise as boas práticas seguidas no código. Exponha exemplos claros relacionados a widgets, gerenciamento de estado, e arquitetura, utilizando emojis apropriados para cada categoria. Por favor, seja específico sobre como cada parte do código reflete essas práticas.\n\n

        ⚠️ **Riscos de Bugs (OBRIGATÓRIO, inclua emojis):**\n
        Aponte os riscos específicos de bugs no código, **citar explicitamente** os trechos que podem causar esses riscos, e relacione cada risco aos arquivos e linhas do código. Use emojis para destacar os riscos mais críticos.\n\n

        🛠 **Sugestões de Refatoração (OBRIGATÓRIO, com exemplos de código e emojis):**\n
        Sugira refatorações detalhadas, incluindo exemplos práticos. Incluir sugestões para melhorar a performance e a legibilidade do código, destacando as refatorações prioritárias com emojis.\n\n

        💡 **Dívidas Técnicas (OBRIGATÓRIO, inclua emojis):**\n
        Liste as dívidas técnicas com clareza. Mesmo que as dívidas sejam mínimas, inclua sugestões de melhorias futuras e sempre utilize exemplos práticos com emojis para tornar a análise mais compreensível." "$DIFF_CONTENT")

        # Create the JSON payload using jq
        JSON_PAYLOAD=$(jq -n \
        --arg content "$FULL_CONTENT" \
        '{"contents":[{"role": "user", "parts":[{"text": $content}]}]}')

        # Send the request to the Gemini API
        API_KEY=${{ secrets.GOOGLE_GEMINI_API_KEY }}
        RESPONSE=$(curl -H 'Content-Type: application/json' \
          -d "$JSON_PAYLOAD" \
          "https://generativelanguage.googleapis.com/v1/models/gemini-pro:generateContent?key=${API_KEY}")

        echo "API response: $RESPONSE"

        # Save the response to a file
        echo "$RESPONSE" > gemini_response.json

    # Step 4: Extract Gemini response message to file
    - name: Extract Gemini response message
      run: |
        # Verifique se a resposta contém conteúdo válido
        if jq -e '.candidates[0].content.parts[0].text' gemini_response.json > /dev/null; then
          jq -r '.candidates[0].content.parts[0].text' gemini_response.json > gemini_review.md
        else
          echo "No valid content in response" > gemini_review.md
        fi

    # Step 5: Load the Gemini response into an environment variable
    - name: Load Gemini response into variable
      id: load_gemini_response
      run: |
        GEMINI_REVIEW=$(cat gemini_review.md)
        echo "GEMINI_REVIEW<<EOF" >> $GITHUB_ENV
        echo "$GEMINI_REVIEW" >> $GITHUB_ENV
        echo "EOF" >> $GITHUB_ENV

    # Step 6: Post Gemini review as a comment on the pull request
    - name: Post Gemini review comment
      uses: peter-evans/create-or-update-comment@v1
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        issue-number: ${{ github.event.pull_request.number }}
        body: |
          ## Refined Gemini Code Review
          ${{ env.GEMINI_REVIEW }}
