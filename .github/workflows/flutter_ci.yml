name: Flutter CI

on:
  pull_request:
    branches:
      - master

permissions:
  pull-requests: write
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    # Step 1: Checkout the repository code with full history
    - name: Checkout code
      uses: actions/checkout@v2
      with:
        fetch-depth: 0  # Garantir que todo o histórico seja baixado

    # Step 2: Generate filtered diff for Gemini review (only .dart files)
    - name: Generate filtered diff for Gemini review
      run: git diff origin/master...HEAD -- '*.dart' > changes.diff

    # Step 3: Split the diff into smaller chunks (1000 characters) and send to Gemini in multiple requests
    - name: Send diff to Gemini in chunks
      id: gemini_review
      run: |
        # Read the full diff content into a variable
        DIFF_CONTENT=$(cat changes.diff)

        # Define chunk size and split the content into smaller parts
        CHUNK_SIZE=1000
        TOTAL_LENGTH=${#DIFF_CONTENT}

        # Loop through each chunk and send to Gemini API
        for (( i=0; i<$TOTAL_LENGTH; i+=$CHUNK_SIZE )); do
          CHUNK=$(echo "$DIFF_CONTENT" | cut -c $i-$((i+CHUNK_SIZE)))

          # Escape the CHUNK for JSON
          ESCAPED_CHUNK=$(echo "$CHUNK" | jq -Rs .)

          # Optimized review message with emojis and detailed prompts
          FULL_CONTENT=$(printf "🔍 **Resumo Detalhado das Alterações do PR:**\nResumo detalhado do que foi modificado no PR com base no diff:\n%s\n\n📝 **Boas práticas de Flutter (inclua emojis):**\nO código segue boas práticas de Flutter? Cite exemplos claros e aponte práticas específicas relacionadas a widgets, state management, arquitetura, entre outros.\n\n⚠️ **Riscos de Bugs (inclua emojis):**\nIdentifique riscos específicos com base no código fornecido, apontando os trechos onde os problemas podem ocorrer.\n\n🛠 **Sugestões de Refatoração (com exemplos de código e emojis):**\nSugira melhorias no código com exemplos práticos:\n```dart\nvoid exampleRefactor() {\n  // Exemplo de refatoração\n}\n```\n\n💡 **Dívidas Técnicas (inclua emojis):**\nListe sempre as dívidas técnicas que podem ser introduzidas, mesmo que sejam mínimas." "$CHUNK")

          # Create the JSON payload using jq
          JSON_PAYLOAD=$(jq -n \
          --arg content "$FULL_CONTENT" \
          '{"contents":[{"role": "user", "parts":[{"text": $content}]}]}')

          # Send the request to the Gemini API
          API_KEY=${{ secrets.GOOGLE_GEMINI_API_KEY }}
          RESPONSE=$(curl -H 'Content-Type: application/json' \
            -d "$JSON_PAYLOAD" \
            "https://generativelanguage.googleapis.com/v1/models/gemini-pro:generateContent?key=${API_KEY}")

          echo "API response: $RESPONSE"

          # Save the response to a file
          echo "$RESPONSE" >> gemini_response.json
        done

    # Step 4: Extract Gemini response message to file
    - name: Extract Gemini response message
      run: |
        # Verifique se a resposta contém conteúdo válido
        if jq -e '.candidates[0].content.parts[0].text' gemini_response.json > /dev/null; then
          jq -r '.candidates[0].content.parts[0].text' gemini_response.json > gemini_review.md
        else
          echo "No valid content in response" > gemini_review.md
        fi

    # Step 5: Load the Gemini response into an environment variable
    - name: Load the Gemini response into a variable
      id: load_gemini_response
      run: |
        GEMINI_REVIEW=$(cat gemini_review.md)
        echo "GEMINI_REVIEW<<EOF" >> $GITHUB_ENV
        echo "$GEMINI_REVIEW" >> $GITHUB_ENV
        echo "EOF" >> $GITHUB_ENV

    # Step 6: Post the Gemini review as a comment on the pull request
    - name: Post Gemini review comment
      uses: peter-evans/create-or-update-comment@v1
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        issue-number: ${{ github.event.pull_request.number }}
        body: |
          ## Refined Gemini Code Review
          ${{ env.GEMINI_REVIEW }}
