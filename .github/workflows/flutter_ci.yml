name: Flutter CI

on:
  pull_request:
    branches:
      - master

permissions:
  pull-requests: write
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: 'stable'
      
      - name: Dummy step for PR validation
        run: echo "✅ Dummy step executed — PR flow is working!"


      - name: Install dependencies
        run: flutter pub get

      - name: Run tests with coverage
        run: flutter test --coverage

      - name: Upload test coverage result
        uses: actions/upload-artifact@v2.3.1
        with:
          name: coverage-report
          path: coverage/lcov.info

      - name: Generate filtered diff for Gemini review
        run: git diff origin/master...HEAD -- '*.dart' > changes.diff

      - name: Send full diff to Gemini
        id: gemini_review
        run: |
          DIFF_CONTENT=$(cat changes.diff)
          ESCAPED_DIFF=$(jq -Rs . <<< "$DIFF_CONTENT")
          FULL_CONTENT="🔍 **Resumo Detalhado das Alterações do PR:**\nResumo detalhado das alterações:\n${ESCAPED_DIFF}\n\n📝 **Boas práticas de Flutter:**\nO código segue boas práticas de Flutter? Cite exemplos claros de práticas específicas relacionadas a widgets, state management e arquitetura.\n\n⚠️ **Riscos de Bugs:**\nIdentifique e descreva riscos específicos de bugs com base no código fornecido.\n\n🛠 **Sugestões de Refatoração (com exemplos de código):**\nSugira melhorias no código com exemplos práticos.\n\n💡 **Dívidas Técnicas:**\nListe as dívidas técnicas que podem ser introduzidas."
          ESCAPED_CONTENT=$(jq -Rs . <<< "$FULL_CONTENT")
          JSON_PAYLOAD=$(jq -n --arg content "$ESCAPED_CONTENT" '{"contents":[{"role": "user", "parts":[{"text": $content}]}]}')
          API_KEY=${{ secrets.GOOGLE_GEMINI_API_KEY }}
          RESPONSE=$(curl -H 'Content-Type: application/json' -d "$JSON_PAYLOAD" "https://generativelanguage.googleapis.com/v1/models/gemini-pro:generateContent?key=${API_KEY}")
          echo "API response: $RESPONSE"
          echo "$RESPONSE" > gemini_response.json

      - name: Extract Gemini response message
        run: |
          if jq -e '.candidates[0].content.parts[0].text' gemini_response.json > /dev/null; then
            jq -r '.candidates[0].content.parts[0].text' gemini_response.json > gemini_review.md
          else
            echo "No valid content in response" > gemini_review.md
          fi

      - name: Load the Gemini response into a variable
        id: load_gemini_response
        run: |
          GEMINI_REVIEW=$(cat gemini_review.md)
          echo "GEMINI_REVIEW<<EOF" >> $GITHUB_ENV
          echo "$GEMINI_REVIEW" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Post Gemini review comment
        uses: peter-evans/create-or-update-comment@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          issue-number: ${{ github.event.pull_request.number }}
          body: |
            ## Gemini Code Review
            ${{ env.GEMINI_REVIEW }}
